'use strict';

const assert = require('assert');
const sinon = require('sinon');
const mock = require('mock-require');

mock('mongodb', 'mongo-mock');

const { MongoClient } = require('mongodb');

const { MongoDB, MongoDBError } = require('./../mongodb');

/* eslint-disable prefer-arrow-callback */

describe('MongoDB', function() {

	const mongodb = new MongoDB({
		host: 'mongodb://localhost:3306/fizzmod',
		user: 'root',
		db: 'myDB'
	});

	class Model {

		get dbname() {
			return 'myDB';
		}

		static get indexes() {
			return [
				'value'
			];
		}

		getTable() {
			return 'table';
		}
	}

	const model = new Model();

	describe('handled errors', function() {

		describe('getFilter()', function() {

			it('should explode ðŸ˜ƒðŸ”¥ with "model requires indexes"', function() {

				assert.throws(() => {
					mongodb.getFilter({});
				}, {
					name: 'MongoDBError',
					code: MongoDBError.codes.MODEL_EMPTY_INDEXES
				});
			});

			it('should explode ðŸ˜ƒðŸ”¥ with "Operation requires indexes"', function() {

				assert.throws(() => {
					mongodb.getFilter(model);
				}, {
					name: 'MongoDBError',
					code: MongoDBError.codes.EMPTY_INDEXES
				});

			});
		});
	});

	describe('checkConnection()', function() {
		it('should not explode ðŸ˜±ðŸ”¥', async function() {
			await assert.doesNotReject(mongodb.checkConnection());
		});
	});

	describe('formatIndex()', function() {
		it('should return formatted index object', function() {
			assert.deepEqual(typeof mongodb.formatIndex('index'), 'object');
		});
	});

	describe('createIndexes()', function() {

		it('should not explode ðŸ˜±ðŸ”¥', async function() {
			await assert.doesNotReject(mongodb.createIndexes(model));
		});
	});

	describe('prepareFields()', function() {

		it('should not explode ðŸ˜±ðŸ”¥', function() {

			const fields = {
				_id: 0,
				value: 'sarasa'
			};

			assert.doesNotThrow(function() { mongodb.prepareFields(fields); });
		});

	});

	describe('insert()', function() {

		it('should return true', async function() {

			const item = {
				_id: 0,
				value: 'sarasa'
			};

			const result = await mongodb.insert(model, item);

			assert.deepEqual(result, true);
		});
	});

	describe('save()', function() {

		it('should return true', async function() {

			const item = {
				_id: 0,
				value: 'sarasa'
			};

			const result = await mongodb.save(model, item);

			assert.deepEqual(result, true);
		});
	});

	describe('update()', function() {

		it('should return 1', async function() {

			const result = await mongodb.update(model, { value: 'foobar' }, { value: 'sarasa' });
			assert.deepEqual(result, 1);
		});

		it('should return 0', async function() {

			const result = await mongodb.update(model, {value: 'foobar' }, { foo: 'bar' });
			assert.deepEqual(result, 0);
		});
	});

	describe('get()', function() {

		it('should return db collection array', async function() {

			const result = await mongodb.get(model, {});

			assert.deepEqual(Array.isArray(result), true);
		});

	});

	describe('multiInsert()', function() {

		it('should return true', async function() {

			const items = [
				{
					_id: 0,
					value: 'sarasa1'
				},
				{
					_id: 1,
					value: 'sarasa2'
				},
				{
					_id: 2,
					value: 'sarasa3'
				}
			];

			const result = await mongodb.multiInsert(model, items);

			assert.deepEqual(result, true);
		});

	});

	describe('multiSave()', function() {

		it.only('should throw "not implemented" because mongo-mock not supports bulkWrite method but it demostrates that the test call that function on real mongodb.', async function() {

			const items = [
				{
					_id: 0,
					value: 'sarasa1'
				},
				{
					_id: 1,
					value: 'sarasa2'
				},
				{
					_id: 2,
					value: 'sarasa3'
				}
			];

			const result = await mongodb.multiSave(model, items);

			assert.deepEqual(result, true);
		});
	});

	describe('getFilter()', function() {

		it('should return the filter object', function() {

			const item = {
				_id: 0,
				value: 'sarasa'
			};

			assert.deepEqual(typeof mongodb.getFilter(model, item), 'object');
		});
	});

});
